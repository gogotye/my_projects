from database.hotels_data import hotels_data
from database.users_data import users
from handlers.custom.lowprice import low_price_send_data
from handlers.custom.highprice import high_price_send_data
from handlers.custom.history import add_value
from loader import bot
from utils.request_func import display_user_info, from_dict_to_str, time
from states.user_info import Info
from telebot.types import Message
from keyboards.reply.keyboard import keyboard, keyboard_2
import re
from handlers.custom import bestdeal
from datetime import datetime


@bot.message_handler(commands=['lowprice', 'highprice', 'bestdeal'])
def base(message: Message) -> None:
    users[message.from_user.id] = {'command': message.text, 'time': time()}
    bot.set_state(message.from_user.id, Info.city, message.chat.id)
    bot.send_message(message.chat.id, '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –Ω–∞–π—Ç–∏ –æ—Ç–µ–ª—å?')


@bot.message_handler(state=Info.city)
def city(message: Message) -> None:
    if not re.fullmatch(r'[A-Z][a-z]+(?:[-\s]?[A-Z][a-z]+)*', message.text):
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')
    else:
        bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç–µ–ª–µ–π?\n'
                                          '–ú–∞–∫—Å–∏–º—É–º 50')
        bot.set_state(message.from_user.id, Info.hotels_limit, message.chat.id)
        users[message.from_user.id]['city'] = message.text


@bot.message_handler(state=Info.hotels_limit)
def hotels(message: Message) -> None:
    if not message.text.isdigit():
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')
    elif int(message.text) > 50:
        bot.send_message(message.chat.id, '–ù–µ –±–æ–ª—å—à–µ 50')
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ä–µ–∑–¥–∞ –≤ –æ—Ç–µ–ª—å.\n–§–æ—Ä–º–∞—Ç: YYYY-MM-DD')
        bot.set_state(message.from_user.id, Info.check_in, message.chat.id)
        users[message.from_user.id]['hotels_limit'] = int(message.text)


@bot.message_handler(state=Info.check_in)
def check_in(message):
    match = re.fullmatch(r'\d{4}-\d{2}-\d{2}', message.text)
    try:
        if not match:
            bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        elif datetime.strptime(match.group(), '%Y-%m-%d'):
            bot.set_state(message.from_user.id, Info.check_out, message.chat.id)
            users[message.from_user.id]['check_in'] = message.text
            bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ!\n–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –∏–∑ –æ—Ç–µ–ª—è.\n'
                                              '–§–æ—Ä–º–∞—Ç: YYYY-MM-DD')
    except ValueError:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∞—Ç—É')


@bot.message_handler(state=Info.check_out)
def check_out(message):
    match = re.fullmatch(r'\d{4}-\d{2}-\d{2}', message.text)
    try:
        if not match:
            bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        elif datetime.strptime(match.group(), '%Y-%m-%d'):
            check_out = datetime.strptime(match.group(), '%Y-%m-%d')
            check_in_date = datetime.strptime(users[message.from_user.id]['check_in'], '%Y-%m-%d')
            if (check_out.year >
                check_in_date.year) or (check_out.year == check_in_date.year and check_out.month >
                                        check_in_date.month) or (check_out.year == check_in_date.year
                                                                 and check_out.month == check_in_date.month
                                                                 and check_out.day > check_in_date.day):
                bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ!\n–•–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–µ–ª–µ–π?\n',
                                 reply_markup=keyboard())
                bot.set_state(message.from_user.id, Info.req_photo, message.chat.id)
                users[message.from_user.id]['check_out'] = message.text
            else:
                bot.send_message(message.chat.id, '–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥–µ–Ω—å –ø—Ä–∏–µ–∑–¥–∞ –∏–ª–∏ —Ä–∞–Ω—å—à–µ –Ω–µ–≥–æ')
    except ValueError:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∞—Ç—É')


@bot.message_handler(state=Info.req_photo)
def photo(message: Message) -> None:
    if message.text == '–î–∞':
        bot.set_state(message.from_user.id, Info.photo_limit, message.chat.id)
        bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π?\n'
                                          '–ú–∞–∫—Å–∏–º—É–º 30')
    elif message.text == '–ù–µ—Ç' and users[message.from_user.id]['command'] == '/bestdeal':
        bot.set_state(message.from_user.id, Info.min_distance, message.chat.id)
        bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –æ—Ç —Ü–µ–Ω—Ç—Ä–∞\n'
                                          '–ú–æ–∂–µ—Ç –±—ã—Ç—å —Ü–µ–ª–æ–µ –∏–ª–∏ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É\n'
                                          '–ù–∞–ø—Ä–∏–º–µ—Ä: 1 –∏–ª–∏ 0.23')
    elif message.text == '–ù–µ—Ç':
        bot.send_message(message.chat.id, display_user_info(user_data=users[message.from_user.id]),
                         reply_markup=keyboard_2())
        bot.delete_state(message.from_user.id, message.chat.id)
    else:
        bot.send_message(message.chat.id, f'{message.from_user.first_name}, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–∞" –∏–ª–∏ "–ù–µ—Ç"')


@bot.message_handler(state=Info.photo_limit)
def get_photo(message: Message) -> None:
    if not message.text.isdigit():
        bot.send_message(message.chat.id, '–ö–æ–ª-–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º')
    elif int(message.text) > 30:
        bot.send_message(message.chat.id, '–ù–µ –±–æ–ª—å—à–µ 30 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π')
    elif users[message.from_user.id]['command'] == '/bestdeal':
        users[message.from_user.id]["photo_limit"] = int(message.text)
        bot.set_state(message.from_user.id, Info.min_distance, message.chat.id)
        bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –æ—Ç —Ü–µ–Ω—Ç—Ä–∞\n'
                                          '–ú–æ–∂–µ—Ç –±—ã—Ç—å —Ü–µ–ª–æ–µ –∏–ª–∏ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É\n'
                                          '–ù–∞–ø—Ä–∏–º–µ—Ä: 1 –∏–ª–∏ 0.23')
    else:
        users[message.from_user.id]["photo_limit"] = int(message.text)
        bot.send_message(message.chat.id, display_user_info(users[message.from_user.id]),
                         reply_markup=keyboard_2())
        bot.delete_state(message.from_user.id, message.chat.id)


@bot.message_handler(func=lambda message: message.text == '–í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ'
                     or message.text == '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ')
def send_data(message: Message) -> None:
    if message.text == '–í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ':
        try:
            if users[message.from_user.id]['command'] == '/lowprice':
                low_price_send_data(message=message)
            elif users[message.from_user.id]['command'] == '/highprice':
                high_price_send_data(message=message)
            elif users[message.from_user.id]['command'] == '/bestdeal':
                bestdeal.bestdeal_send_data(message=message)
        except Exception as ex:
            bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò¢')
            raise Exception(ex)
        else:
            hotels_name = from_dict_to_str(hotels=hotels_data) if hotels_data else "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            add_value(data=(message.from_user.id,
                            users[message.from_user.id]['command'],
                            users[message.from_user.id]['time'],
                            hotels_name))
            users.clear()
            hotels_data.clear()

    elif message.text == '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ':
        bot.send_message(message.chat.id, f'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É {users[message.from_user.id]["command"]}')

